//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 4 files.
  struct file {
    /// Resource file `D4DProtocol.sol`.
    static let d4DProtocolSol = Rswift.FileResource(bundle: R.hostingBundle, name: "D4DProtocol", pathExtension: "sol")
    /// Resource file `SeeleToken.sol`.
    static let seeleTokenSol = Rswift.FileResource(bundle: R.hostingBundle, name: "SeeleToken", pathExtension: "sol")
    /// Resource file `sound.caf`.
    static let soundCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "sound", pathExtension: "caf")
    /// Resource file `trust-min.js`.
    static let trustMinJs = Rswift.FileResource(bundle: R.hostingBundle, name: "trust-min", pathExtension: "js")
    
    /// `bundle.url(forResource: "D4DProtocol", withExtension: "sol")`
    static func d4DProtocolSol(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.d4DProtocolSol
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "SeeleToken", withExtension: "sol")`
    static func seeleTokenSol(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.seeleTokenSol
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "sound", withExtension: "caf")`
    static func soundCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.soundCaf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "trust-min", withExtension: "js")`
    static func trustMinJs(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.trustMinJs
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 56 images.
  struct image {
    /// Image `Navigation_back`.
    static let navigation_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "Navigation_back")
    /// Image `QRCodeScanningLineGrid`.
    static let qrCodeScanningLineGrid = Rswift.ImageResource(bundle: R.hostingBundle, name: "QRCodeScanningLineGrid")
    /// Image `dex4d_account_bg`.
    static let dex4d_account_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "dex4d_account_bg")
    /// Image `icon_about`.
    static let icon_about = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_about")
    /// Image `icon_authority`.
    static let icon_authority = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_authority")
    /// Image `icon_back`.
    static let icon_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_back")
    /// Image `icon_collect_select`.
    static let icon_collect_select = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_collect_select")
    /// Image `icon_collect`.
    static let icon_collect = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_collect")
    /// Image `icon_delete`.
    static let icon_delete = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_delete")
    /// Image `icon_down`.
    static let icon_down = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_down")
    /// Image `icon_eth`.
    static let icon_eth = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_eth")
    /// Image `icon_eye_close_home`.
    static let icon_eye_close_home = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_eye_close_home")
    /// Image `icon_eye_close_wallet`.
    static let icon_eye_close_wallet = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_eye_close_wallet")
    /// Image `icon_eye_open_home`.
    static let icon_eye_open_home = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_eye_open_home")
    /// Image `icon_eye_open_wallet`.
    static let icon_eye_open_wallet = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_eye_open_wallet")
    /// Image `icon_flashlight_close`.
    static let icon_flashlight_close = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_flashlight_close")
    /// Image `icon_flashlight_open`.
    static let icon_flashlight_open = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_flashlight_open")
    /// Image `icon_home`.
    static let icon_home = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_home")
    /// Image `icon_like`.
    static let icon_like = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_like")
    /// Image `icon_menu`.
    static let icon_menu = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_menu")
    /// Image `icon_omg`.
    static let icon_omg = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_omg")
    /// Image `icon_refresh`.
    static let icon_refresh = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_refresh")
    /// Image `icon_right`.
    static let icon_right = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_right")
    /// Image `icon_scan`.
    static let icon_scan = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_scan")
    /// Image `icon_seele`.
    static let icon_seele = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_seele")
    /// Image `icon_select_white`.
    static let icon_select_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_select_white")
    /// Image `icon_select`.
    static let icon_select = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_select")
    /// Image `icon_setting`.
    static let icon_setting = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_setting")
    /// Image `icon_slider`.
    static let icon_slider = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_slider")
    /// Image `icon_transaction`.
    static let icon_transaction = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_transaction")
    /// Image `icon_version`.
    static let icon_version = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_version")
    /// Image `icon_withdraw`.
    static let icon_withdraw = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_withdraw")
    /// Image `icon_zrx`.
    static let icon_zrx = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_zrx")
    /// Image `launch_background`.
    static let launch_background = Rswift.ImageResource(bundle: R.hostingBundle, name: "launch_background")
    /// Image `logo_text`.
    static let logo_text = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo_text")
    /// Image `scan_image`.
    static let scan_image = Rswift.ImageResource(bundle: R.hostingBundle, name: "scan_image")
    /// Image `scan_login`.
    static let scan_login = Rswift.ImageResource(bundle: R.hostingBundle, name: "scan_login")
    /// Image `scan_pay`.
    static let scan_pay = Rswift.ImageResource(bundle: R.hostingBundle, name: "scan_pay")
    /// Image `tabbar_browser_selected`.
    static let tabbar_browser_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_browser_selected")
    /// Image `tabbar_browser`.
    static let tabbar_browser = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_browser")
    /// Image `tabbar_dex4d_selected`.
    static let tabbar_dex4d_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_dex4d_selected")
    /// Image `tabbar_dex4d`.
    static let tabbar_dex4d = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_dex4d")
    /// Image `tabbar_me_selected`.
    static let tabbar_me_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_me_selected")
    /// Image `tabbar_me`.
    static let tabbar_me = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_me")
    /// Image `tabbar_wallet_selected`.
    static let tabbar_wallet_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_wallet_selected")
    /// Image `tabbar_wallet`.
    static let tabbar_wallet = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_wallet")
    /// Image `token_placeHolder`.
    static let token_placeHolder = Rswift.ImageResource(bundle: R.hostingBundle, name: "token_placeHolder")
    /// Image `wallet_history_selected`.
    static let wallet_history_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "wallet_history_selected")
    /// Image `wallet_history`.
    static let wallet_history = Rswift.ImageResource(bundle: R.hostingBundle, name: "wallet_history")
    /// Image `wallet_receive_selected`.
    static let wallet_receive_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "wallet_receive_selected")
    /// Image `wallet_receive`.
    static let wallet_receive = Rswift.ImageResource(bundle: R.hostingBundle, name: "wallet_receive")
    /// Image `wallet_scan`.
    static let wallet_scan = Rswift.ImageResource(bundle: R.hostingBundle, name: "wallet_scan")
    /// Image `wallet_send_selected`.
    static let wallet_send_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "wallet_send_selected")
    /// Image `wallet_send`.
    static let wallet_send = Rswift.ImageResource(bundle: R.hostingBundle, name: "wallet_send")
    /// Image `welcome_logo`.
    static let welcome_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "welcome_logo")
    /// Image `withdraw_success`.
    static let withdraw_success = Rswift.ImageResource(bundle: R.hostingBundle, name: "withdraw_success")
    
    /// `UIImage(named: "Navigation_back", bundle: ..., traitCollection: ...)`
    static func navigation_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.navigation_back, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "QRCodeScanningLineGrid", bundle: ..., traitCollection: ...)`
    static func qrCodeScanningLineGrid(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qrCodeScanningLineGrid, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "dex4d_account_bg", bundle: ..., traitCollection: ...)`
    static func dex4d_account_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dex4d_account_bg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_about", bundle: ..., traitCollection: ...)`
    static func icon_about(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_about, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_authority", bundle: ..., traitCollection: ...)`
    static func icon_authority(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_authority, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_back", bundle: ..., traitCollection: ...)`
    static func icon_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_back, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_collect", bundle: ..., traitCollection: ...)`
    static func icon_collect(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_collect, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_collect_select", bundle: ..., traitCollection: ...)`
    static func icon_collect_select(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_collect_select, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_delete", bundle: ..., traitCollection: ...)`
    static func icon_delete(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_delete, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_down", bundle: ..., traitCollection: ...)`
    static func icon_down(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_down, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_eth", bundle: ..., traitCollection: ...)`
    static func icon_eth(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_eth, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_eye_close_home", bundle: ..., traitCollection: ...)`
    static func icon_eye_close_home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_eye_close_home, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_eye_close_wallet", bundle: ..., traitCollection: ...)`
    static func icon_eye_close_wallet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_eye_close_wallet, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_eye_open_home", bundle: ..., traitCollection: ...)`
    static func icon_eye_open_home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_eye_open_home, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_eye_open_wallet", bundle: ..., traitCollection: ...)`
    static func icon_eye_open_wallet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_eye_open_wallet, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_flashlight_close", bundle: ..., traitCollection: ...)`
    static func icon_flashlight_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_flashlight_close, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_flashlight_open", bundle: ..., traitCollection: ...)`
    static func icon_flashlight_open(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_flashlight_open, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_home", bundle: ..., traitCollection: ...)`
    static func icon_home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_home, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_like", bundle: ..., traitCollection: ...)`
    static func icon_like(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_like, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_menu", bundle: ..., traitCollection: ...)`
    static func icon_menu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_menu, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_omg", bundle: ..., traitCollection: ...)`
    static func icon_omg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_omg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_refresh", bundle: ..., traitCollection: ...)`
    static func icon_refresh(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_refresh, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_right", bundle: ..., traitCollection: ...)`
    static func icon_right(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_right, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_scan", bundle: ..., traitCollection: ...)`
    static func icon_scan(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_scan, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_seele", bundle: ..., traitCollection: ...)`
    static func icon_seele(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_seele, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_select", bundle: ..., traitCollection: ...)`
    static func icon_select(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_select, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_select_white", bundle: ..., traitCollection: ...)`
    static func icon_select_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_select_white, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_setting", bundle: ..., traitCollection: ...)`
    static func icon_setting(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_setting, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_slider", bundle: ..., traitCollection: ...)`
    static func icon_slider(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_slider, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_transaction", bundle: ..., traitCollection: ...)`
    static func icon_transaction(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_transaction, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_version", bundle: ..., traitCollection: ...)`
    static func icon_version(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_version, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_withdraw", bundle: ..., traitCollection: ...)`
    static func icon_withdraw(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_withdraw, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_zrx", bundle: ..., traitCollection: ...)`
    static func icon_zrx(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_zrx, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "launch_background", bundle: ..., traitCollection: ...)`
    static func launch_background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.launch_background, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logo_text", bundle: ..., traitCollection: ...)`
    static func logo_text(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo_text, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "scan_image", bundle: ..., traitCollection: ...)`
    static func scan_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.scan_image, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "scan_login", bundle: ..., traitCollection: ...)`
    static func scan_login(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.scan_login, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "scan_pay", bundle: ..., traitCollection: ...)`
    static func scan_pay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.scan_pay, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabbar_browser", bundle: ..., traitCollection: ...)`
    static func tabbar_browser(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_browser, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabbar_browser_selected", bundle: ..., traitCollection: ...)`
    static func tabbar_browser_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_browser_selected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabbar_dex4d", bundle: ..., traitCollection: ...)`
    static func tabbar_dex4d(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_dex4d, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabbar_dex4d_selected", bundle: ..., traitCollection: ...)`
    static func tabbar_dex4d_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_dex4d_selected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabbar_me", bundle: ..., traitCollection: ...)`
    static func tabbar_me(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_me, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabbar_me_selected", bundle: ..., traitCollection: ...)`
    static func tabbar_me_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_me_selected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabbar_wallet", bundle: ..., traitCollection: ...)`
    static func tabbar_wallet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_wallet, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabbar_wallet_selected", bundle: ..., traitCollection: ...)`
    static func tabbar_wallet_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_wallet_selected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "token_placeHolder", bundle: ..., traitCollection: ...)`
    static func token_placeHolder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.token_placeHolder, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "wallet_history", bundle: ..., traitCollection: ...)`
    static func wallet_history(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wallet_history, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "wallet_history_selected", bundle: ..., traitCollection: ...)`
    static func wallet_history_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wallet_history_selected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "wallet_receive", bundle: ..., traitCollection: ...)`
    static func wallet_receive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wallet_receive, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "wallet_receive_selected", bundle: ..., traitCollection: ...)`
    static func wallet_receive_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wallet_receive_selected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "wallet_scan", bundle: ..., traitCollection: ...)`
    static func wallet_scan(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wallet_scan, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "wallet_send", bundle: ..., traitCollection: ...)`
    static func wallet_send(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wallet_send, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "wallet_send_selected", bundle: ..., traitCollection: ...)`
    static func wallet_send_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wallet_send_selected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "welcome_logo", bundle: ..., traitCollection: ...)`
    static func welcome_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.welcome_logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "withdraw_success", bundle: ..., traitCollection: ...)`
    static func withdraw_success(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.withdraw_success, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 6 nibs.
  struct nib {
    /// Nib `AssetTitleView`.
    static let assetTitleView = _R.nib._AssetTitleView()
    /// Nib `AssetViewCell`.
    static let assetViewCell = _R.nib._AssetViewCell()
    /// Nib `SelectImportView`.
    static let selectImportView = _R.nib._SelectImportView()
    /// Nib `SendTokenView`.
    static let sendTokenView = _R.nib._SendTokenView()
    /// Nib `ShowSendSuccessView`.
    static let showSendSuccessView = _R.nib._ShowSendSuccessView()
    /// Nib `WalletAssetView`.
    static let walletAssetView = _R.nib._WalletAssetView()
    
    /// `UINib(name: "AssetTitleView", in: bundle)`
    static func assetTitleView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.assetTitleView)
    }
    
    /// `UINib(name: "AssetViewCell", in: bundle)`
    static func assetViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.assetViewCell)
    }
    
    /// `UINib(name: "SelectImportView", in: bundle)`
    static func selectImportView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.selectImportView)
    }
    
    /// `UINib(name: "SendTokenView", in: bundle)`
    static func sendTokenView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.sendTokenView)
    }
    
    /// `UINib(name: "ShowSendSuccessView", in: bundle)`
    static func showSendSuccessView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.showSendSuccessView)
    }
    
    /// `UINib(name: "WalletAssetView", in: bundle)`
    static func walletAssetView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.walletAssetView)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 0 reuse identifiers.
  struct reuseIdentifier {
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 2 localization tables.
  struct string {
    /// This `R.string.launchScreen` struct is generated, and contains static references to 1 localization keys.
    struct launchScreen {
      /// zh-Hans translation: 欢迎来到Dex4D新维度
      /// 
      /// Locales: zh-Hans, en
      static let qbbDqHTfText = Rswift.StringResource(key: "Qbb-Dq-hTf.text", tableName: "LaunchScreen", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      
      /// zh-Hans translation: 欢迎来到Dex4D新维度
      /// 
      /// Locales: zh-Hans, en
      static func qbbDqHTfText(_: Void = ()) -> String {
        return NSLocalizedString("Qbb-Dq-hTf.text", tableName: "LaunchScreen", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.localization` struct is generated, and contains static references to 223 localization keys.
    struct localization {
      /// en translation:  amount
      /// 
      /// Locales: en, zh-Hans
      static let amount = Rswift.StringResource(key: " amount", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation:  available D4D amount: 
      /// 
      /// Locales: en, zh-Hans
      static let availableD4DAmount = Rswift.StringResource(key: "available D4D amount", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: %@ already exists
      /// 
      /// Locales: en, zh-Hans
      static let alreadyExists = Rswift.StringResource(key: "%@ already exists", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: %@ can't be empty
      /// 
      /// Locales: en, zh-Hans
      static let canTBeEmpty = Rswift.StringResource(key: "%@ can't be empty", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: %@ is illegal
      /// 
      /// Locales: en, zh-Hans
      static let isIllegal = Rswift.StringResource(key: "%@ is illegal", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: %d Dex4D failed transaction happened. Click for more information
      /// 
      /// Locales: en, zh-Hans
      static let dDex4DFailedTransactionHappenedClickForMoreInformation = Rswift.StringResource(key: "%d Dex4D failed transaction happened. Click for more information", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: %d Transaction failed
      /// 
      /// Locales: en, zh-Hans
      static let dTransactionFailed = Rswift.StringResource(key: "%d Transaction failed", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: 24h Change
      /// 
      /// Locales: en, zh-Hans
      static let hChange = Rswift.StringResource(key: "24h Change", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: A
      /// 
      /// Locales: en, zh-Hans
      static let advisor = Rswift.StringResource(key: "Advisor", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: About
      /// 
      /// Locales: en, zh-Hans
      static let about = Rswift.StringResource(key: "About", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Acailable wallet amount: %@
      /// 
      /// Locales: en, zh-Hans
      static let acailableWalletAmount = Rswift.StringResource(key: "Acailable wallet amount: %@", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Actual Tx Cost/Fee
      /// 
      /// Locales: en, zh-Hans
      static let actualTxCostFee = Rswift.StringResource(key: "Actual Tx Cost/Fee", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Add bookmark
      /// 
      /// Locales: en, zh-Hans
      static let addBookmark = Rswift.StringResource(key: "Add bookmark", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Add bookmark success
      /// 
      /// Locales: en, zh-Hans
      static let addBookmarkSuccess = Rswift.StringResource(key: "Add bookmark success", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Address
      /// 
      /// Locales: en, zh-Hans
      static let address = Rswift.StringResource(key: "Address", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Address form error
      /// 
      /// Locales: en, zh-Hans
      static let addressFormError = Rswift.StringResource(key: "Address form error", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Address mismatched
      /// 
      /// Locales: en, zh-Hans
      static let addressMismatched = Rswift.StringResource(key: "Address mismatched", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Advisor purchase stage. %@ away from closing
      /// 
      /// Locales: en, zh-Hans
      static let advisorTips = Rswift.StringResource(key: "Advisor tips", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: All
      /// 
      /// Locales: en, zh-Hans
      static let all = Rswift.StringResource(key: "All", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Asset
      /// 
      /// Locales: en, zh-Hans
      static let asset = Rswift.StringResource(key: "Asset", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Authority
      /// 
      /// Locales: en, zh-Hans
      static let authority = Rswift.StringResource(key: "Authority", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Available Withdrawal amount: 
      /// 
      /// Locales: en, zh-Hans
      static let availableWithdrawalAmount = Rswift.StringResource(key: "Available Withdrawal amount: ", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Backup Keystore
      /// 
      /// Locales: en, zh-Hans
      static let backupKeystore = Rswift.StringResource(key: "Backup Keystore", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: BookMark
      /// 
      /// Locales: en, zh-Hans
      static let bookMark = Rswift.StringResource(key: "BookMark", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Bookmark/History
      /// 
      /// Locales: en, zh-Hans
      static let bookmarkHistory = Rswift.StringResource(key: "Bookmark/History", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Browser
      /// 
      /// Locales: en, zh-Hans
      static let browser = Rswift.StringResource(key: "Browser", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Buy
      /// 
      /// Locales: en, zh-Hans
      static let buy = Rswift.StringResource(key: "Buy", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Buy amount
      /// 
      /// Locales: en, zh-Hans
      static let buyAmount = Rswift.StringResource(key: "Buy amount", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Camera not detected
      /// 
      /// Locales: en, zh-Hans
      static let cameraNotDetected = Rswift.StringResource(key: "Camera not detected", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Cancel
      /// 
      /// Locales: en, zh-Hans
      static let cancel = Rswift.StringResource(key: "Cancel", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Check memoric
      /// 
      /// Locales: en, zh-Hans
      static let checkMemoric = Rswift.StringResource(key: "Check memoric", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Check that you wrote it down correctly so you can protect your money.
      /// 
      /// Locales: en, zh-Hans
      static let checkThatYouWroteItDownCorrectlySoYouCanProtectYourMoney = Rswift.StringResource(key: "Check that you wrote it down correctly so you can protect your money.", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Clear browser cache
      /// 
      /// Locales: en, zh-Hans
      static let clearBrowserCache = Rswift.StringResource(key: "Clear browser cache", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Clear cache
      /// 
      /// Locales: en, zh-Hans
      static let clearCache = Rswift.StringResource(key: "Clear cache", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Clear success
      /// 
      /// Locales: en, zh-Hans
      static let clearSuccess = Rswift.StringResource(key: "Clear success", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Code state error
      /// 
      /// Locales: en, zh-Hans
      static let codeStateError = Rswift.StringResource(key: "Code state error", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Coin
      /// 
      /// Locales: en, zh-Hans
      static let coin = Rswift.StringResource(key: "Coin", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Confirm
      /// 
      /// Locales: en, zh-Hans
      static let confirm = Rswift.StringResource(key: "Confirm", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Confirm password
      /// 
      /// Locales: en, zh-Hans
      static let confirmPassword = Rswift.StringResource(key: "Confirm password", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Confirm your PIN
      /// 
      /// Locales: en, zh-Hans
      static let confirmYourPIN = Rswift.StringResource(key: "Confirm your PIN", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Connected WIFI
      /// 
      /// Locales: en, zh-Hans
      static let connectedWIFI = Rswift.StringResource(key: "Connected WIFI", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Connected cellular mobile network
      /// 
      /// Locales: en, zh-Hans
      static let connectedCellularMobileNetwork = Rswift.StringResource(key: "Connected cellular mobile network", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Continue
      /// 
      /// Locales: en, zh-Hans
      static let `continue` = Rswift.StringResource(key: "Continue", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Copied
      /// 
      /// Locales: en, zh-Hans
      static let copied = Rswift.StringResource(key: "Copied", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Copy
      /// 
      /// Locales: en, zh-Hans
      static let copy = Rswift.StringResource(key: "Copy", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Copy address
      /// 
      /// Locales: en, zh-Hans
      static let copyAddress = Rswift.StringResource(key: "Copy address", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Copy link
      /// 
      /// Locales: en, zh-Hans
      static let copyLink = Rswift.StringResource(key: "Copy link", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Create Wallet failed
      /// 
      /// Locales: en, zh-Hans
      static let createWalletFailed = Rswift.StringResource(key: "Create Wallet failed", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Create Wallet...
      /// 
      /// Locales: en, zh-Hans
      static let createWallet = Rswift.StringResource(key: "Create Wallet...", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Create nonce failed
      /// 
      /// Locales: en, zh-Hans
      static let createNonceFailed = Rswift.StringResource(key: "Create nonce failed", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Create your PIN
      /// 
      /// Locales: en, zh-Hans
      static let createYourPIN = Rswift.StringResource(key: "Create your PIN", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Currency
      /// 
      /// Locales: en, zh-Hans
      static let currency = Rswift.StringResource(key: "Currency", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Current Dex4D amount: %@
      /// 
      /// Locales: en
      static let currentDex4DAmount = Rswift.StringResource(key: "Current Dex4D amount: %@", tableName: "Localization", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Current Version
      /// 
      /// Locales: en, zh-Hans
      static let currentVersion = Rswift.StringResource(key: "Current Version", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: D
      /// 
      /// Locales: en, zh-Hans
      static let delist = Rswift.StringResource(key: "Delist", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: D4D Account
      /// 
      /// Locales: en, zh-Hans
      static let d4DAccount = Rswift.StringResource(key: "D4D Account", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: D4D amount
      /// 
      /// Locales: en, zh-Hans
      static let d4DAmount = Rswift.StringResource(key: "D4D amount", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: D4D balance
      /// 
      /// Locales: en, zh-Hans
      static let d4DAsset = Rswift.StringResource(key: "D4D asset", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: D4D balance
      /// 
      /// Locales: en, zh-Hans
      static let d4DBalance = Rswift.StringResource(key: "D4D balance", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Delete
      /// 
      /// Locales: en, zh-Hans
      static let delete = Rswift.StringResource(key: "Delete", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Delist. Only history price provided
      /// 
      /// Locales: en, zh-Hans
      static let delistOnlyHistoryPriceProvided = Rswift.StringResource(key: "Delist. Only history price provided", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Dex4D
      /// 
      /// Locales: en, zh-Hans
      static let dex4D = Rswift.StringResource(key: "Dex4D", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Dex4D app is an referral application and you won't be able to experience it if you don't have an referral link.
      /// 
      /// Locales: en, zh-Hans
      static let dex4DAppIsAnReferralApplicationAndYouWonTBeAbleToExperienceItIfYouDonTHaveAnReferralLink = Rswift.StringResource(key: "Dex4D app is an referral application and you won't be able to experience it if you don't have an referral link.", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Dex4D is a app on your phone. If you lose your phone, you can access your account with a wallet recovery phrase very easily.
      /// 
      /// Locales: en, zh-Hans
      static let dex4DIsAAppOnYourPhoneIfYouLoseYourPhoneYouCanAccessYourAccountWithAWalletRecoveryPhraseVeryEasily = Rswift.StringResource(key: "Dex4D is a app on your phone. If you lose your phone, you can access your account with a wallet recovery phrase very easily.", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Done
      /// 
      /// Locales: en, zh-Hans
      static let done = Rswift.StringResource(key: "Done", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Duplicate nonce
      /// 
      /// Locales: en, zh-Hans
      static let duplicateNonce = Rswift.StringResource(key: "Duplicate nonce", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Edit
      /// 
      /// Locales: en, zh-Hans
      static let edit = Rswift.StringResource(key: "Edit", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Enter phrase
      /// 
      /// Locales: en, zh-Hans
      static let enterPhrase = Rswift.StringResource(key: "Enter phrase", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Export error
      /// 
      /// Locales: en, zh-Hans
      static let exportError = Rswift.StringResource(key: "Export error", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Failed
      /// 
      /// Locales: en, zh-Hans
      static let failed = Rswift.StringResource(key: "Failed", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Failed to connect to server
      /// 
      /// Locales: en, zh-Hans
      static let failedToConnectToServer = Rswift.StringResource(key: "Failed to connect to server", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Failed to get data
      /// 
      /// Locales: en, zh-Hans
      static let failedToGetData = Rswift.StringResource(key: "Failed to get data", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Find new version
      /// 
      /// Locales: en, zh-Hans
      static let findNewVersion = Rswift.StringResource(key: "Find new version", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Finished
      /// 
      /// Locales: en, zh-Hans
      static let finished = Rswift.StringResource(key: "Finished", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: From
      /// 
      /// Locales: en, zh-Hans
      static let from = Rswift.StringResource(key: "From", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: GAS consumption
      /// 
      /// Locales: en, zh-Hans
      static let gasConsumption = Rswift.StringResource(key: "GAS consumption", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: GAS consumption: %@ ETH
      /// 
      /// Locales: en, zh-Hans
      static let gasConsumptionETH = Rswift.StringResource(key: "GAS consumption: %@ ETH", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Help center
      /// 
      /// Locales: en, zh-Hans
      static let helpCenter = Rswift.StringResource(key: "Help center", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Hide
      /// 
      /// Locales: en, zh-Hans
      static let hide = Rswift.StringResource(key: "Hide", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: History
      /// 
      /// Locales: en, zh-Hans
      static let history = Rswift.StringResource(key: "History", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Import wallet failed
      /// 
      /// Locales: en, zh-Hans
      static let importWalletFailed = Rswift.StringResource(key: "Import wallet failed", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Import with keystore
      /// 
      /// Locales: en, zh-Hans
      static let importWithKeystore = Rswift.StringResource(key: "Import with keystore", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Import with memoric
      /// 
      /// Locales: en, zh-Hans
      static let importWithMemoric = Rswift.StringResource(key: "Import with memoric", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Importing wallet...
      /// 
      /// Locales: en, zh-Hans
      static let importingWallet = Rswift.StringResource(key: "Importing wallet...", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Incorrect PIN
      /// 
      /// Locales: en, zh-Hans
      static let incorrectPIN = Rswift.StringResource(key: "Incorrect PIN", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Input amount
      /// 
      /// Locales: en, zh-Hans
      static let inputAmount = Rswift.StringResource(key: "Input amount", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Input password
      /// 
      /// Locales: en, zh-Hans
      static let inputPassword = Rswift.StringResource(key: "Input password", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Input your PIN
      /// 
      /// Locales: en, zh-Hans
      static let inputYourPIN = Rswift.StringResource(key: "Input your PIN", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Insufficient tokens
      /// 
      /// Locales: en, zh-Hans
      static let insufficientTokens = Rswift.StringResource(key: "Insufficient tokens", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Invalid Invitation code
      /// 
      /// Locales: en, zh-Hans
      static let invalidInvitationCode = Rswift.StringResource(key: "Invalid Invitation code", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Invalid address
      /// 
      /// Locales: en, zh-Hans
      static let invalidAddress = Rswift.StringResource(key: "Invalid address", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Invalid amount
      /// 
      /// Locales: en, zh-Hans
      static let invalidAmount = Rswift.StringResource(key: "Invalid amount", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Invitation code
      /// 
      /// Locales: en, zh-Hans
      static let invitationCode = Rswift.StringResource(key: "Invitation code", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Keystore
      /// 
      /// Locales: en, zh-Hans
      static let keystore = Rswift.StringResource(key: "Keystore", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Language
      /// 
      /// Locales: en, zh-Hans
      static let language = Rswift.StringResource(key: "Language", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Last price: %@ Estimate!!!
      /// 
      /// Locales: en, zh-Hans
      static let lastPriceEstimate = Rswift.StringResource(key: "Last price: %@ Estimate!!!", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Login failed
      /// 
      /// Locales: en, zh-Hans
      static let loginFailed = Rswift.StringResource(key: "Login failed", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Login in Web with your app only sendyour address.  You can sign transaction with private key on your mobile safely
      /// 
      /// Locales: en, zh-Hans
      static let loginInWebWithYourAppOnlySendyourAddressYouCanSignTransactionWithPrivateKeyOnYourMobileSafely = Rswift.StringResource(key: "Login in Web with your app only sendyour address. \nYou can sign transaction with private key on your mobile safely", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Login success
      /// 
      /// Locales: en, zh-Hans
      static let loginSuccess = Rswift.StringResource(key: "Login success", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Long press to save
      /// 
      /// Locales: en, zh-Hans
      static let longPressToSave = Rswift.StringResource(key: "Long press to save", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Me
      /// 
      /// Locales: en, zh-Hans
      static let me = Rswift.StringResource(key: "Me", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: My referral code
      /// 
      /// Locales: en, zh-Hans
      static let myReferralCode = Rswift.StringResource(key: "My referral code", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: N
      /// 
      /// Locales: en, zh-Hans
      static let new = Rswift.StringResource(key: "New", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Network not connected
      /// 
      /// Locales: en, zh-Hans
      static let networkNotConnected = Rswift.StringResource(key: "Network not connected", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: New coin, Swap option is not available
      /// 
      /// Locales: en, zh-Hans
      static let newCoinSwapOptionIsNotAvailable = Rswift.StringResource(key: "New coin, Swap option is not available", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: No data
      /// 
      /// Locales: en, zh-Hans
      static let noData = Rswift.StringResource(key: "No data", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Nonce not exist
      /// 
      /// Locales: en, zh-Hans
      static let nonceNotExist = Rswift.StringResource(key: "Nonce not exist", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Not available
      /// 
      /// Locales: en, zh-Hans
      static let notAvailable = Rswift.StringResource(key: "Not available", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Not available,  please go to “Me > Authority > Swap“  to see more details
      /// 
      /// Locales: en, zh-Hans
      static let notAvailablePleaseGoToMeAuthoritySwapToSeeMoreDetails = Rswift.StringResource(key: "Not available, \nplease go to “Me > Authority > Swap“ \nto see more details", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: OK
      /// 
      /// Locales: en, zh-Hans
      static let oK = Rswift.StringResource(key: "OK", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Owning %@ D4D
      /// 
      /// Locales: en
      static let owningD4D = Rswift.StringResource(key: "Owning %@ D4D", tableName: "Localization", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Owning %@ D4D or Paying %@ ETH unlocks the Masternode/Referral system
      /// 
      /// Locales: en, zh-Hans
      static let owningD4DOrPayingETHUnlocksTheMasternodeReferralSystem = Rswift.StringResource(key: "Owning %@ D4D or Paying %@ ETH unlocks the Masternode/Referral system", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Owning %@ D4D or Paying %@ ETH unlocks the Swap transaction masternode
      /// 
      /// Locales: en, zh-Hans
      static let owningD4DOrPayingETHUnlocksTheSwapTransactionMasternode = Rswift.StringResource(key: "Owning %@ D4D or Paying %@ ETH unlocks the Swap transaction masternode", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: PIN not match
      /// 
      /// Locales: en, zh-Hans
      static let pinNotMatch = Rswift.StringResource(key: "PIN not match", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Paid
      /// 
      /// Locales: en, zh-Hans
      static let paid = Rswift.StringResource(key: "Paid", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Pay %@ ETH
      /// 
      /// Locales: en, zh-Hans
      static let payETH = Rswift.StringResource(key: "Pay %@ ETH", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Pay %@ ETH to become Permanent %@ masternode
      /// 
      /// Locales: en, zh-Hans
      static let payETHToBecomePermanentMasternode = Rswift.StringResource(key: "Pay %@ ETH to become Permanent %@ masternode", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Pay failed
      /// 
      /// Locales: en, zh-Hans
      static let payFailed = Rswift.StringResource(key: "Pay failed", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Pay success
      /// 
      /// Locales: en, zh-Hans
      static let paySuccess = Rswift.StringResource(key: "Pay success", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Payment pending
      /// 
      /// Locales: en, zh-Hans
      static let paymentPending = Rswift.StringResource(key: "Payment pending", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Pending
      /// 
      /// Locales: en, zh-Hans
      static let pending = Rswift.StringResource(key: "Pending", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Permanent available
      /// 
      /// Locales: en, zh-Hans
      static let permanentAvailable = Rswift.StringResource(key: "Permanent available", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Photos
      /// 
      /// Locales: en, zh-Hans
      static let photos = Rswift.StringResource(key: "Photos", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Phrase is wrong
      /// 
      /// Locales: en, zh-Hans
      static let phraseIsWrong = Rswift.StringResource(key: "Phrase is wrong", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Please enter your invitation code
      /// 
      /// Locales: en, zh-Hans
      static let pleaseEnterYourInvitationCode = Rswift.StringResource(key: "Please enter your invitation code", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Please go -> [Settings-privacy-Photos-Dex4D] opens photos privileges
      /// 
      /// Locales: en, zh-Hans
      static let pleaseGoSettingsPrivacyPhotosDex4DOpensPhotosPrivileges = Rswift.StringResource(key: "Please go -> [Settings-privacy-Photos-Dex4D] opens photos privileges", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Please go -> [Settings-privacy-camera-Dex4D] opens camera privileges
      /// 
      /// Locales: en, zh-Hans
      static let pleaseGoSettingsPrivacyCameraDex4DOpensCameraPrivileges = Rswift.StringResource(key: "Please go -> [Settings-privacy-camera-Dex4D] opens camera privileges", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Please input amount
      /// 
      /// Locales: en, zh-Hans
      static let pleaseInputAmount = Rswift.StringResource(key: "Please input amount", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Please input number
      /// 
      /// Locales: en, zh-Hans
      static let pleaseInputNumber = Rswift.StringResource(key: "Please input number", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Please input your keystore file to restore your wallet or import your wallet
      /// 
      /// Locales: en, zh-Hans
      static let pleaseInputYourKeystoreFileToRestoreYourWalletOrImportYourWallet = Rswift.StringResource(key: "Please input your keystore file to restore your wallet or import your wallet", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Please input your memoric phrase to restore your wallet or import your wallet(Typically 12, separately with blank)
      /// 
      /// Locales: en, zh-Hans
      static let pleaseInputYourMemoricPhraseToRestoreYourWalletOrImportYourWalletTypically12SeparatelyWithBlank = Rswift.StringResource(key: "Please input your memoric phrase to restore your wallet or import your wallet(Typically 12, separately with blank)", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Please select token
      /// 
      /// Locales: en, zh-Hans
      static let pleaseSelectToken = Rswift.StringResource(key: "Please select token", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Price
      /// 
      /// Locales: en, zh-Hans
      static let price = Rswift.StringResource(key: "Price", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Protect your asset before it's too late!
      /// 
      /// Locales: en, zh-Hans
      static let protectYourAssetBeforeItSTooLate = Rswift.StringResource(key: "Protect your asset before it's too late!", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: QR code expired
      /// 
      /// Locales: en, zh-Hans
      static let qrCodeExpired = Rswift.StringResource(key: "QR code expired", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: QR code timeout
      /// 
      /// Locales: en, zh-Hans
      static let qrCodeTimeout = Rswift.StringResource(key: "QR code timeout", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: R
      /// 
      /// Locales: en, zh-Hans
      static let regular = Rswift.StringResource(key: "Regular", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Realized token
      /// 
      /// Locales: en, zh-Hans
      static let realizedToken = Rswift.StringResource(key: "Realized token", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Receive address
      /// 
      /// Locales: en, zh-Hans
      static let receiveAddress = Rswift.StringResource(key: "Receive address", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Ref dividends
      /// 
      /// Locales: en, zh-Hans
      static let refDividends = Rswift.StringResource(key: "Ref dividends", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Referral address
      /// 
      /// Locales: en, zh-Hans
      static let referralAddress = Rswift.StringResource(key: "Referral address", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Referral code
      /// 
      /// Locales: en, zh-Hans
      static let referralCode = Rswift.StringResource(key: "Referral code", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Register your referral address(Begin with letter)
      /// 
      /// Locales: en, zh-Hans
      static let registerYourReferralAddressBeginWithLetter = Rswift.StringResource(key: "Register your referral address(Begin with letter)", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Reinvest
      /// 
      /// Locales: en, zh-Hans
      static let reinvest = Rswift.StringResource(key: "Reinvest", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Reinvest amount
      /// 
      /// Locales: en, zh-Hans
      static let reinvestAmount = Rswift.StringResource(key: "Reinvest amount", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Reinvest balance
      /// 
      /// Locales: en, zh-Hans
      static let reinvestBalance = Rswift.StringResource(key: "Reinvest balance", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Reject
      /// 
      /// Locales: en, zh-Hans
      static let reject = Rswift.StringResource(key: "Reject", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Reload
      /// 
      /// Locales: en, zh-Hans
      static let reload = Rswift.StringResource(key: "Reload", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Remind me later
      /// 
      /// Locales: en, zh-Hans
      static let remindMeLater = Rswift.StringResource(key: "Remind me later", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Restore
      /// 
      /// Locales: en, zh-Hans
      static let restore = Rswift.StringResource(key: "Restore", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Restore wallet
      /// 
      /// Locales: en, zh-Hans
      static let restoreWallet = Rswift.StringResource(key: "Restore wallet", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: S
      /// 
      /// Locales: en, zh-Hans
      static let sunDown = Rswift.StringResource(key: "SunDown", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Save image
      /// 
      /// Locales: en, zh-Hans
      static let saveImage = Rswift.StringResource(key: "Save image", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Save to photo Librany
      /// 
      /// Locales: en, zh-Hans
      static let saveToPhotoLibrany = Rswift.StringResource(key: "Save to photo Librany", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Saved
      /// 
      /// Locales: en, zh-Hans
      static let saved = Rswift.StringResource(key: "Saved", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Scan
      /// 
      /// Locales: en, zh-Hans
      static let scan = Rswift.StringResource(key: "Scan", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Scan result
      /// 
      /// Locales: en, zh-Hans
      static let scanResult = Rswift.StringResource(key: "Scan result", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Scanning time
      /// 
      /// Locales: en, zh-Hans
      static let scanningTime = Rswift.StringResource(key: "Scanning time", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Security
      /// 
      /// Locales: en, zh-Hans
      static let security = Rswift.StringResource(key: "Security", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: See
      /// 
      /// Locales: en, zh-Hans
      static let see = Rswift.StringResource(key: "See", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Select token
      /// 
      /// Locales: en, zh-Hans
      static let selectToken = Rswift.StringResource(key: "Select token", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Sell
      /// 
      /// Locales: en, zh-Hans
      static let sell = Rswift.StringResource(key: "Sell", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Sell amount
      /// 
      /// Locales: en, zh-Hans
      static let sellAmount = Rswift.StringResource(key: "Sell amount", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Send
      /// 
      /// Locales: en, zh-Hans
      static let send = Rswift.StringResource(key: "Send", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Send amount
      /// 
      /// Locales: en, zh-Hans
      static let sendAmount = Rswift.StringResource(key: "Send amount", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Send failure
      /// 
      /// Locales: en, zh-Hans
      static let sendFailure = Rswift.StringResource(key: "Send failure", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Send transaction failed
      /// 
      /// Locales: en, zh-Hans
      static let sendTransactionFailed = Rswift.StringResource(key: "Send transaction failed", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Set amount
      /// 
      /// Locales: en, zh-Hans
      static let setAmount = Rswift.StringResource(key: "Set amount", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Setting
      /// 
      /// Locales: en, zh-Hans
      static let setting = Rswift.StringResource(key: "Setting", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Share QR Code
      /// 
      /// Locales: en, zh-Hans
      static let shareQRCode = Rswift.StringResource(key: "Share QR Code", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Sign verify failed
      /// 
      /// Locales: en, zh-Hans
      static let signVerifyFailed = Rswift.StringResource(key: "Sign verify failed", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Spend: 
      /// 
      /// Locales: en, zh-Hans
      static let spend = Rswift.StringResource(key: "Spend: ", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Start
      /// 
      /// Locales: en, zh-Hans
      static let start = Rswift.StringResource(key: "Start", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Status
      /// 
      /// Locales: en, zh-Hans
      static let status = Rswift.StringResource(key: "Status", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Success
      /// 
      /// Locales: en, zh-Hans
      static let success = Rswift.StringResource(key: "Success", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Sun down. %@ away from delist
      /// 
      /// Locales: en, zh-Hans
      static let sunDownTips = Rswift.StringResource(key: "Sun down tips", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Swap asset
      /// 
      /// Locales: en, zh-Hans
      static let swapAsset = Rswift.StringResource(key: "Swap asset", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Temporary available
      /// 
      /// Locales: en, zh-Hans
      static let temporaryAvailable = Rswift.StringResource(key: "Temporary available", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: The QRCode can be automatically scanned in the box.
      /// 
      /// Locales: en, zh-Hans
      static let theQRCodeCanBeAutomaticallyScannedInTheBox = Rswift.StringResource(key: "The QRCode can be automatically scanned in the box.", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: The nonce has been bound
      /// 
      /// Locales: en, zh-Hans
      static let theNonceHasBeenBound = Rswift.StringResource(key: "The nonce has been bound", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: The results of your scan are as follows：
      /// 
      /// Locales: en, zh-Hans
      static let theResultsOfYourScanAreAsFollows = Rswift.StringResource(key: "The results of your scan are as follows：", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: This is last version
      /// 
      /// Locales: en, zh-Hans
      static let thisIsLastVersion = Rswift.StringResource(key: "This is last version", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: This is the last version
      /// 
      /// Locales: en, zh-Hans
      static let thisIsTheLastVersion = Rswift.StringResource(key: "This is the last version", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: This transcation already finished
      /// 
      /// Locales: en, zh-Hans
      static let thisTranscationAlreadyFinished = Rswift.StringResource(key: "This transcation already finished", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: To
      /// 
      /// Locales: en, zh-Hans
      static let to = Rswift.StringResource(key: "To", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Token amount
      /// 
      /// Locales: en, zh-Hans
      static let tokenAmount = Rswift.StringResource(key: "Token amount", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Token balance
      /// 
      /// Locales: en, zh-Hans
      static let tokenBalance = Rswift.StringResource(key: "Token balance", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Token select
      /// 
      /// Locales: en, zh-Hans
      static let tokenSelect = Rswift.StringResource(key: "Token select", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Total
      /// 
      /// Locales: en, zh-Hans
      static let total = Rswift.StringResource(key: "Total", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Total D4D balance
      /// 
      /// Locales: en, zh-Hans
      static let totalD4DBalance = Rswift.StringResource(key: "Total D4D balance", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Total Dividends
      /// 
      /// Locales: en, zh-Hans
      static let totalDividends = Rswift.StringResource(key: "Total Dividends", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Total Token balance
      /// 
      /// Locales: en, zh-Hans
      static let totalTokenBalance = Rswift.StringResource(key: "Total Token balance", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Total Volume: 
      /// 
      /// Locales: en, zh-Hans
      static let totalVolume = Rswift.StringResource(key: "Total Volume", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Total asset (%@)
      /// 
      /// Locales: en, zh-Hans
      static let totalAsset = Rswift.StringResource(key: "Total asset (%@)", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Total capital(All pools)
      /// 
      /// Locales: en, zh-Hans
      static let totalCapitalAllPools = Rswift.StringResource(key: "Total capital(All pools)", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Trade
      /// 
      /// Locales: en, zh-Hans
      static let trade = Rswift.StringResource(key: "Trade", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Transaction
      /// 
      /// Locales: en, zh-Hans
      static let transaction = Rswift.StringResource(key: "Transaction", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Transaction failed
      /// 
      /// Locales: en, zh-Hans
      static let transactionFailed = Rswift.StringResource(key: "Transaction failed", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Txs dividends
      /// 
      /// Locales: en, zh-Hans
      static let txsDividends = Rswift.StringResource(key: "Txs dividends", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: TxsHash
      /// 
      /// Locales: en, zh-Hans
      static let txsHash = Rswift.StringResource(key: "TxsHash", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Type
      /// 
      /// Locales: en, zh-Hans
      static let type = Rswift.StringResource(key: "Type", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Unable to open camera
      /// 
      /// Locales: en, zh-Hans
      static let unableToOpenCamera = Rswift.StringResource(key: "Unable to open camera", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Unable to save image
      /// 
      /// Locales: en, zh-Hans
      static let unableToSaveImage = Rswift.StringResource(key: "Unable to save image", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Unknow error
      /// 
      /// Locales: en, zh-Hans
      static let unknowError = Rswift.StringResource(key: "Unknow error", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Unknown network
      /// 
      /// Locales: en, zh-Hans
      static let unknownNetwork = Rswift.StringResource(key: "Unknown network", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Unnamed title
      /// 
      /// Locales: en, zh-Hans
      static let unnamedTitle = Rswift.StringResource(key: "Unnamed title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Upgrade now
      /// 
      /// Locales: en, zh-Hans
      static let upgradeNow = Rswift.StringResource(key: "Upgrade now", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Upload your address to login
      /// 
      /// Locales: en, zh-Hans
      static let uploadYourAddressToLogin = Rswift.StringResource(key: "Upload your address to login", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Version
      /// 
      /// Locales: en, zh-Hans
      static let version = Rswift.StringResource(key: "Version", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Waiting
      /// 
      /// Locales: en, zh-Hans
      static let waiting = Rswift.StringResource(key: "Waiting", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Wallet
      /// 
      /// Locales: en, zh-Hans
      static let wallet = Rswift.StringResource(key: "Wallet", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Wallet balance
      /// 
      /// Locales: en, zh-Hans
      static let walletBalance = Rswift.StringResource(key: "Wallet balance", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Web login
      /// 
      /// Locales: en, zh-Hans
      static let webLogin = Rswift.StringResource(key: "Web login", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Withdraw
      /// 
      /// Locales: en, zh-Hans
      static let withdraw = Rswift.StringResource(key: "Withdraw", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Withdraw amount
      /// 
      /// Locales: en, zh-Hans
      static let withdrawAmount = Rswift.StringResource(key: "Withdraw amount", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Write down your recovery phrase and keep it in a safe place. Dex4D team cannot reset it or recover your money for you.
      /// 
      /// Locales: en, zh-Hans
      static let writeDownYourRecoveryPhraseAndKeepItInASafePlaceDex4DTeamCannotResetItOrRecoverYourMoneyForYou = Rswift.StringResource(key: "Write down your recovery phrase and keep it in a safe place. Dex4D team cannot reset it or recover your money for you.", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Wrong input
      /// 
      /// Locales: en, zh-Hans
      static let wrongInput = Rswift.StringResource(key: "Wrong input", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: You have paid for permanent %@ authority Please be more patient before Ethereum confirm this trasaction
      /// 
      /// Locales: en, zh-Hans
      static let youHavePaidForPermanentAuthorityPleaseBeMorePatientBeforeEthereumConfirmThisTrasaction = Rswift.StringResource(key: "You have paid for permanent %@ authority\nPlease be more patient before Ethereum confirm this trasaction", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: You have permanent %@ authority now. Enjoy to trade with your %@
      /// 
      /// Locales: en, zh-Hans
      static let youHavePermanentAuthorityNowEnjoyToTradeWithYour = Rswift.StringResource(key: "You have permanent %@ authority now. Enjoy to trade with your %@", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: You have signed onto web Dex4D
      /// 
      /// Locales: en, zh-Hans
      static let youHaveSignedOntoWebDex4D = Rswift.StringResource(key: "You have signed onto web Dex4D", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Your new keystore file in JSON format generate with password you just input as shown below. Please keep it in safe place. You can import your wallet with this keystore file and it's password
      /// 
      /// Locales: en, zh-Hans
      static let yourNewKeystoreFileInJSONFormatGenerateWithPasswordYouJustInputAsShownBelowPleaseKeepItInSafePlaceYouCanImportYourWalletWithThisKeystoreFileAndItSPassword = Rswift.StringResource(key: "Your new keystore file in JSON format generate with password you just input as shown below. Please keep it in safe place. You can import your wallet with this keystore file and it's password", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// zh-Hans translation: 当前D4D数量: %@
      /// 
      /// Locales: zh-Hans
      static let currentD4DAmount = Rswift.StringResource(key: "Current D4D amount: %@", tableName: "Localization", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 转账地址无效
      /// 
      /// Locales: zh-Hans
      static let sendAddressInvalid = Rswift.StringResource(key: "Send address invalid", tableName: "Localization", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      
      /// en translation:  amount
      /// 
      /// Locales: en, zh-Hans
      static func amount(_: Void = ()) -> String {
        return NSLocalizedString(" amount", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation:  available D4D amount: 
      /// 
      /// Locales: en, zh-Hans
      static func availableD4DAmount(_: Void = ()) -> String {
        return NSLocalizedString("available D4D amount", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: %@ already exists
      /// 
      /// Locales: en, zh-Hans
      static func alreadyExists(_ value1: String) -> String {
        return String(format: NSLocalizedString("%@ already exists", tableName: "Localization", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: %@ can't be empty
      /// 
      /// Locales: en, zh-Hans
      static func canTBeEmpty(_ value1: String) -> String {
        return String(format: NSLocalizedString("%@ can't be empty", tableName: "Localization", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: %@ is illegal
      /// 
      /// Locales: en, zh-Hans
      static func isIllegal(_ value1: String) -> String {
        return String(format: NSLocalizedString("%@ is illegal", tableName: "Localization", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: %d Dex4D failed transaction happened. Click for more information
      /// 
      /// Locales: en, zh-Hans
      static func dDex4DFailedTransactionHappenedClickForMoreInformation(_ value1: Int) -> String {
        return String(format: NSLocalizedString("%d Dex4D failed transaction happened. Click for more information", tableName: "Localization", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: %d Transaction failed
      /// 
      /// Locales: en, zh-Hans
      static func dTransactionFailed(_ value1: Int) -> String {
        return String(format: NSLocalizedString("%d Transaction failed", tableName: "Localization", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: 24h Change
      /// 
      /// Locales: en, zh-Hans
      static func hChange(_: Void = ()) -> String {
        return NSLocalizedString("24h Change", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: A
      /// 
      /// Locales: en, zh-Hans
      static func advisor(_: Void = ()) -> String {
        return NSLocalizedString("Advisor", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: About
      /// 
      /// Locales: en, zh-Hans
      static func about(_: Void = ()) -> String {
        return NSLocalizedString("About", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Acailable wallet amount: %@
      /// 
      /// Locales: en, zh-Hans
      static func acailableWalletAmount(_ value1: String) -> String {
        return String(format: NSLocalizedString("Acailable wallet amount: %@", tableName: "Localization", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Actual Tx Cost/Fee
      /// 
      /// Locales: en, zh-Hans
      static func actualTxCostFee(_: Void = ()) -> String {
        return NSLocalizedString("Actual Tx Cost/Fee", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Add bookmark
      /// 
      /// Locales: en, zh-Hans
      static func addBookmark(_: Void = ()) -> String {
        return NSLocalizedString("Add bookmark", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Add bookmark success
      /// 
      /// Locales: en, zh-Hans
      static func addBookmarkSuccess(_: Void = ()) -> String {
        return NSLocalizedString("Add bookmark success", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Address
      /// 
      /// Locales: en, zh-Hans
      static func address(_: Void = ()) -> String {
        return NSLocalizedString("Address", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Address form error
      /// 
      /// Locales: en, zh-Hans
      static func addressFormError(_: Void = ()) -> String {
        return NSLocalizedString("Address form error", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Address mismatched
      /// 
      /// Locales: en, zh-Hans
      static func addressMismatched(_: Void = ()) -> String {
        return NSLocalizedString("Address mismatched", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Advisor purchase stage. %@ away from closing
      /// 
      /// Locales: en, zh-Hans
      static func advisorTips(_ value1: String) -> String {
        return String(format: NSLocalizedString("Advisor tips", tableName: "Localization", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: All
      /// 
      /// Locales: en, zh-Hans
      static func all(_: Void = ()) -> String {
        return NSLocalizedString("All", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Asset
      /// 
      /// Locales: en, zh-Hans
      static func asset(_: Void = ()) -> String {
        return NSLocalizedString("Asset", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Authority
      /// 
      /// Locales: en, zh-Hans
      static func authority(_: Void = ()) -> String {
        return NSLocalizedString("Authority", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Available Withdrawal amount: 
      /// 
      /// Locales: en, zh-Hans
      static func availableWithdrawalAmount(_: Void = ()) -> String {
        return NSLocalizedString("Available Withdrawal amount: ", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Backup Keystore
      /// 
      /// Locales: en, zh-Hans
      static func backupKeystore(_: Void = ()) -> String {
        return NSLocalizedString("Backup Keystore", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: BookMark
      /// 
      /// Locales: en, zh-Hans
      static func bookMark(_: Void = ()) -> String {
        return NSLocalizedString("BookMark", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Bookmark/History
      /// 
      /// Locales: en, zh-Hans
      static func bookmarkHistory(_: Void = ()) -> String {
        return NSLocalizedString("Bookmark/History", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Browser
      /// 
      /// Locales: en, zh-Hans
      static func browser(_: Void = ()) -> String {
        return NSLocalizedString("Browser", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Buy
      /// 
      /// Locales: en, zh-Hans
      static func buy(_: Void = ()) -> String {
        return NSLocalizedString("Buy", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Buy amount
      /// 
      /// Locales: en, zh-Hans
      static func buyAmount(_: Void = ()) -> String {
        return NSLocalizedString("Buy amount", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Camera not detected
      /// 
      /// Locales: en, zh-Hans
      static func cameraNotDetected(_: Void = ()) -> String {
        return NSLocalizedString("Camera not detected", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Cancel
      /// 
      /// Locales: en, zh-Hans
      static func cancel(_: Void = ()) -> String {
        return NSLocalizedString("Cancel", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Check memoric
      /// 
      /// Locales: en, zh-Hans
      static func checkMemoric(_: Void = ()) -> String {
        return NSLocalizedString("Check memoric", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Check that you wrote it down correctly so you can protect your money.
      /// 
      /// Locales: en, zh-Hans
      static func checkThatYouWroteItDownCorrectlySoYouCanProtectYourMoney(_: Void = ()) -> String {
        return NSLocalizedString("Check that you wrote it down correctly so you can protect your money.", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Clear browser cache
      /// 
      /// Locales: en, zh-Hans
      static func clearBrowserCache(_: Void = ()) -> String {
        return NSLocalizedString("Clear browser cache", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Clear cache
      /// 
      /// Locales: en, zh-Hans
      static func clearCache(_: Void = ()) -> String {
        return NSLocalizedString("Clear cache", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Clear success
      /// 
      /// Locales: en, zh-Hans
      static func clearSuccess(_: Void = ()) -> String {
        return NSLocalizedString("Clear success", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Code state error
      /// 
      /// Locales: en, zh-Hans
      static func codeStateError(_: Void = ()) -> String {
        return NSLocalizedString("Code state error", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Coin
      /// 
      /// Locales: en, zh-Hans
      static func coin(_: Void = ()) -> String {
        return NSLocalizedString("Coin", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Confirm
      /// 
      /// Locales: en, zh-Hans
      static func confirm(_: Void = ()) -> String {
        return NSLocalizedString("Confirm", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Confirm password
      /// 
      /// Locales: en, zh-Hans
      static func confirmPassword(_: Void = ()) -> String {
        return NSLocalizedString("Confirm password", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Confirm your PIN
      /// 
      /// Locales: en, zh-Hans
      static func confirmYourPIN(_: Void = ()) -> String {
        return NSLocalizedString("Confirm your PIN", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Connected WIFI
      /// 
      /// Locales: en, zh-Hans
      static func connectedWIFI(_: Void = ()) -> String {
        return NSLocalizedString("Connected WIFI", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Connected cellular mobile network
      /// 
      /// Locales: en, zh-Hans
      static func connectedCellularMobileNetwork(_: Void = ()) -> String {
        return NSLocalizedString("Connected cellular mobile network", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Continue
      /// 
      /// Locales: en, zh-Hans
      static func `continue`(_: Void = ()) -> String {
        return NSLocalizedString("Continue", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Copied
      /// 
      /// Locales: en, zh-Hans
      static func copied(_: Void = ()) -> String {
        return NSLocalizedString("Copied", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Copy
      /// 
      /// Locales: en, zh-Hans
      static func copy(_: Void = ()) -> String {
        return NSLocalizedString("Copy", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Copy address
      /// 
      /// Locales: en, zh-Hans
      static func copyAddress(_: Void = ()) -> String {
        return NSLocalizedString("Copy address", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Copy link
      /// 
      /// Locales: en, zh-Hans
      static func copyLink(_: Void = ()) -> String {
        return NSLocalizedString("Copy link", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Create Wallet failed
      /// 
      /// Locales: en, zh-Hans
      static func createWalletFailed(_: Void = ()) -> String {
        return NSLocalizedString("Create Wallet failed", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Create Wallet...
      /// 
      /// Locales: en, zh-Hans
      static func createWallet(_: Void = ()) -> String {
        return NSLocalizedString("Create Wallet...", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Create nonce failed
      /// 
      /// Locales: en, zh-Hans
      static func createNonceFailed(_: Void = ()) -> String {
        return NSLocalizedString("Create nonce failed", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Create your PIN
      /// 
      /// Locales: en, zh-Hans
      static func createYourPIN(_: Void = ()) -> String {
        return NSLocalizedString("Create your PIN", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Currency
      /// 
      /// Locales: en, zh-Hans
      static func currency(_: Void = ()) -> String {
        return NSLocalizedString("Currency", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Current Dex4D amount: %@
      /// 
      /// Locales: en
      static func currentDex4DAmount(_ value1: String) -> String {
        return String(format: NSLocalizedString("Current Dex4D amount: %@", tableName: "Localization", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Current Version
      /// 
      /// Locales: en, zh-Hans
      static func currentVersion(_: Void = ()) -> String {
        return NSLocalizedString("Current Version", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: D
      /// 
      /// Locales: en, zh-Hans
      static func delist(_: Void = ()) -> String {
        return NSLocalizedString("Delist", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: D4D Account
      /// 
      /// Locales: en, zh-Hans
      static func d4DAccount(_: Void = ()) -> String {
        return NSLocalizedString("D4D Account", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: D4D amount
      /// 
      /// Locales: en, zh-Hans
      static func d4DAmount(_: Void = ()) -> String {
        return NSLocalizedString("D4D amount", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: D4D balance
      /// 
      /// Locales: en, zh-Hans
      static func d4DAsset(_: Void = ()) -> String {
        return NSLocalizedString("D4D asset", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: D4D balance
      /// 
      /// Locales: en, zh-Hans
      static func d4DBalance(_: Void = ()) -> String {
        return NSLocalizedString("D4D balance", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Delete
      /// 
      /// Locales: en, zh-Hans
      static func delete(_: Void = ()) -> String {
        return NSLocalizedString("Delete", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Delist. Only history price provided
      /// 
      /// Locales: en, zh-Hans
      static func delistOnlyHistoryPriceProvided(_: Void = ()) -> String {
        return NSLocalizedString("Delist. Only history price provided", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Dex4D
      /// 
      /// Locales: en, zh-Hans
      static func dex4D(_: Void = ()) -> String {
        return NSLocalizedString("Dex4D", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Dex4D app is an referral application and you won't be able to experience it if you don't have an referral link.
      /// 
      /// Locales: en, zh-Hans
      static func dex4DAppIsAnReferralApplicationAndYouWonTBeAbleToExperienceItIfYouDonTHaveAnReferralLink(_: Void = ()) -> String {
        return NSLocalizedString("Dex4D app is an referral application and you won't be able to experience it if you don't have an referral link.", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Dex4D is a app on your phone. If you lose your phone, you can access your account with a wallet recovery phrase very easily.
      /// 
      /// Locales: en, zh-Hans
      static func dex4DIsAAppOnYourPhoneIfYouLoseYourPhoneYouCanAccessYourAccountWithAWalletRecoveryPhraseVeryEasily(_: Void = ()) -> String {
        return NSLocalizedString("Dex4D is a app on your phone. If you lose your phone, you can access your account with a wallet recovery phrase very easily.", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Done
      /// 
      /// Locales: en, zh-Hans
      static func done(_: Void = ()) -> String {
        return NSLocalizedString("Done", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Duplicate nonce
      /// 
      /// Locales: en, zh-Hans
      static func duplicateNonce(_: Void = ()) -> String {
        return NSLocalizedString("Duplicate nonce", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Edit
      /// 
      /// Locales: en, zh-Hans
      static func edit(_: Void = ()) -> String {
        return NSLocalizedString("Edit", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Enter phrase
      /// 
      /// Locales: en, zh-Hans
      static func enterPhrase(_: Void = ()) -> String {
        return NSLocalizedString("Enter phrase", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Export error
      /// 
      /// Locales: en, zh-Hans
      static func exportError(_: Void = ()) -> String {
        return NSLocalizedString("Export error", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Failed
      /// 
      /// Locales: en, zh-Hans
      static func failed(_: Void = ()) -> String {
        return NSLocalizedString("Failed", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Failed to connect to server
      /// 
      /// Locales: en, zh-Hans
      static func failedToConnectToServer(_: Void = ()) -> String {
        return NSLocalizedString("Failed to connect to server", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Failed to get data
      /// 
      /// Locales: en, zh-Hans
      static func failedToGetData(_: Void = ()) -> String {
        return NSLocalizedString("Failed to get data", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Find new version
      /// 
      /// Locales: en, zh-Hans
      static func findNewVersion(_: Void = ()) -> String {
        return NSLocalizedString("Find new version", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Finished
      /// 
      /// Locales: en, zh-Hans
      static func finished(_: Void = ()) -> String {
        return NSLocalizedString("Finished", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: From
      /// 
      /// Locales: en, zh-Hans
      static func from(_: Void = ()) -> String {
        return NSLocalizedString("From", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: GAS consumption
      /// 
      /// Locales: en, zh-Hans
      static func gasConsumption(_: Void = ()) -> String {
        return NSLocalizedString("GAS consumption", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: GAS consumption: %@ ETH
      /// 
      /// Locales: en, zh-Hans
      static func gasConsumptionETH(_ value1: String) -> String {
        return String(format: NSLocalizedString("GAS consumption: %@ ETH", tableName: "Localization", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Help center
      /// 
      /// Locales: en, zh-Hans
      static func helpCenter(_: Void = ()) -> String {
        return NSLocalizedString("Help center", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Hide
      /// 
      /// Locales: en, zh-Hans
      static func hide(_: Void = ()) -> String {
        return NSLocalizedString("Hide", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: History
      /// 
      /// Locales: en, zh-Hans
      static func history(_: Void = ()) -> String {
        return NSLocalizedString("History", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Import wallet failed
      /// 
      /// Locales: en, zh-Hans
      static func importWalletFailed(_: Void = ()) -> String {
        return NSLocalizedString("Import wallet failed", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Import with keystore
      /// 
      /// Locales: en, zh-Hans
      static func importWithKeystore(_: Void = ()) -> String {
        return NSLocalizedString("Import with keystore", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Import with memoric
      /// 
      /// Locales: en, zh-Hans
      static func importWithMemoric(_: Void = ()) -> String {
        return NSLocalizedString("Import with memoric", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Importing wallet...
      /// 
      /// Locales: en, zh-Hans
      static func importingWallet(_: Void = ()) -> String {
        return NSLocalizedString("Importing wallet...", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Incorrect PIN
      /// 
      /// Locales: en, zh-Hans
      static func incorrectPIN(_: Void = ()) -> String {
        return NSLocalizedString("Incorrect PIN", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Input amount
      /// 
      /// Locales: en, zh-Hans
      static func inputAmount(_: Void = ()) -> String {
        return NSLocalizedString("Input amount", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Input password
      /// 
      /// Locales: en, zh-Hans
      static func inputPassword(_: Void = ()) -> String {
        return NSLocalizedString("Input password", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Input your PIN
      /// 
      /// Locales: en, zh-Hans
      static func inputYourPIN(_: Void = ()) -> String {
        return NSLocalizedString("Input your PIN", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Insufficient tokens
      /// 
      /// Locales: en, zh-Hans
      static func insufficientTokens(_: Void = ()) -> String {
        return NSLocalizedString("Insufficient tokens", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Invalid Invitation code
      /// 
      /// Locales: en, zh-Hans
      static func invalidInvitationCode(_: Void = ()) -> String {
        return NSLocalizedString("Invalid Invitation code", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Invalid address
      /// 
      /// Locales: en, zh-Hans
      static func invalidAddress(_: Void = ()) -> String {
        return NSLocalizedString("Invalid address", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Invalid amount
      /// 
      /// Locales: en, zh-Hans
      static func invalidAmount(_: Void = ()) -> String {
        return NSLocalizedString("Invalid amount", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Invitation code
      /// 
      /// Locales: en, zh-Hans
      static func invitationCode(_: Void = ()) -> String {
        return NSLocalizedString("Invitation code", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Keystore
      /// 
      /// Locales: en, zh-Hans
      static func keystore(_: Void = ()) -> String {
        return NSLocalizedString("Keystore", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Language
      /// 
      /// Locales: en, zh-Hans
      static func language(_: Void = ()) -> String {
        return NSLocalizedString("Language", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Last price: %@ Estimate!!!
      /// 
      /// Locales: en, zh-Hans
      static func lastPriceEstimate(_ value1: String) -> String {
        return String(format: NSLocalizedString("Last price: %@ Estimate!!!", tableName: "Localization", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Login failed
      /// 
      /// Locales: en, zh-Hans
      static func loginFailed(_: Void = ()) -> String {
        return NSLocalizedString("Login failed", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Login in Web with your app only sendyour address.  You can sign transaction with private key on your mobile safely
      /// 
      /// Locales: en, zh-Hans
      static func loginInWebWithYourAppOnlySendyourAddressYouCanSignTransactionWithPrivateKeyOnYourMobileSafely(_: Void = ()) -> String {
        return NSLocalizedString("Login in Web with your app only sendyour address. \nYou can sign transaction with private key on your mobile safely", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Login success
      /// 
      /// Locales: en, zh-Hans
      static func loginSuccess(_: Void = ()) -> String {
        return NSLocalizedString("Login success", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Long press to save
      /// 
      /// Locales: en, zh-Hans
      static func longPressToSave(_: Void = ()) -> String {
        return NSLocalizedString("Long press to save", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Me
      /// 
      /// Locales: en, zh-Hans
      static func me(_: Void = ()) -> String {
        return NSLocalizedString("Me", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: My referral code
      /// 
      /// Locales: en, zh-Hans
      static func myReferralCode(_: Void = ()) -> String {
        return NSLocalizedString("My referral code", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: N
      /// 
      /// Locales: en, zh-Hans
      static func new(_: Void = ()) -> String {
        return NSLocalizedString("New", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Network not connected
      /// 
      /// Locales: en, zh-Hans
      static func networkNotConnected(_: Void = ()) -> String {
        return NSLocalizedString("Network not connected", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: New coin, Swap option is not available
      /// 
      /// Locales: en, zh-Hans
      static func newCoinSwapOptionIsNotAvailable(_: Void = ()) -> String {
        return NSLocalizedString("New coin, Swap option is not available", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: No data
      /// 
      /// Locales: en, zh-Hans
      static func noData(_: Void = ()) -> String {
        return NSLocalizedString("No data", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Nonce not exist
      /// 
      /// Locales: en, zh-Hans
      static func nonceNotExist(_: Void = ()) -> String {
        return NSLocalizedString("Nonce not exist", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Not available
      /// 
      /// Locales: en, zh-Hans
      static func notAvailable(_: Void = ()) -> String {
        return NSLocalizedString("Not available", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Not available,  please go to “Me > Authority > Swap“  to see more details
      /// 
      /// Locales: en, zh-Hans
      static func notAvailablePleaseGoToMeAuthoritySwapToSeeMoreDetails(_: Void = ()) -> String {
        return NSLocalizedString("Not available, \nplease go to “Me > Authority > Swap“ \nto see more details", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: OK
      /// 
      /// Locales: en, zh-Hans
      static func oK(_: Void = ()) -> String {
        return NSLocalizedString("OK", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Owning %@ D4D
      /// 
      /// Locales: en
      static func owningD4D(_ value1: String) -> String {
        return String(format: NSLocalizedString("Owning %@ D4D", tableName: "Localization", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Owning %@ D4D or Paying %@ ETH unlocks the Masternode/Referral system
      /// 
      /// Locales: en, zh-Hans
      static func owningD4DOrPayingETHUnlocksTheMasternodeReferralSystem(_ value1: String, _ value2: String) -> String {
        return String(format: NSLocalizedString("Owning %@ D4D or Paying %@ ETH unlocks the Masternode/Referral system", tableName: "Localization", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2)
      }
      
      /// en translation: Owning %@ D4D or Paying %@ ETH unlocks the Swap transaction masternode
      /// 
      /// Locales: en, zh-Hans
      static func owningD4DOrPayingETHUnlocksTheSwapTransactionMasternode(_ value1: String, _ value2: String) -> String {
        return String(format: NSLocalizedString("Owning %@ D4D or Paying %@ ETH unlocks the Swap transaction masternode", tableName: "Localization", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2)
      }
      
      /// en translation: PIN not match
      /// 
      /// Locales: en, zh-Hans
      static func pinNotMatch(_: Void = ()) -> String {
        return NSLocalizedString("PIN not match", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Paid
      /// 
      /// Locales: en, zh-Hans
      static func paid(_: Void = ()) -> String {
        return NSLocalizedString("Paid", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Pay %@ ETH
      /// 
      /// Locales: en, zh-Hans
      static func payETH(_ value1: String) -> String {
        return String(format: NSLocalizedString("Pay %@ ETH", tableName: "Localization", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Pay %@ ETH to become Permanent %@ masternode
      /// 
      /// Locales: en, zh-Hans
      static func payETHToBecomePermanentMasternode(_ value1: String, _ value2: String) -> String {
        return String(format: NSLocalizedString("Pay %@ ETH to become Permanent %@ masternode", tableName: "Localization", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2)
      }
      
      /// en translation: Pay failed
      /// 
      /// Locales: en, zh-Hans
      static func payFailed(_: Void = ()) -> String {
        return NSLocalizedString("Pay failed", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Pay success
      /// 
      /// Locales: en, zh-Hans
      static func paySuccess(_: Void = ()) -> String {
        return NSLocalizedString("Pay success", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Payment pending
      /// 
      /// Locales: en, zh-Hans
      static func paymentPending(_: Void = ()) -> String {
        return NSLocalizedString("Payment pending", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Pending
      /// 
      /// Locales: en, zh-Hans
      static func pending(_: Void = ()) -> String {
        return NSLocalizedString("Pending", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Permanent available
      /// 
      /// Locales: en, zh-Hans
      static func permanentAvailable(_: Void = ()) -> String {
        return NSLocalizedString("Permanent available", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Photos
      /// 
      /// Locales: en, zh-Hans
      static func photos(_: Void = ()) -> String {
        return NSLocalizedString("Photos", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Phrase is wrong
      /// 
      /// Locales: en, zh-Hans
      static func phraseIsWrong(_: Void = ()) -> String {
        return NSLocalizedString("Phrase is wrong", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please enter your invitation code
      /// 
      /// Locales: en, zh-Hans
      static func pleaseEnterYourInvitationCode(_: Void = ()) -> String {
        return NSLocalizedString("Please enter your invitation code", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please go -> [Settings-privacy-Photos-Dex4D] opens photos privileges
      /// 
      /// Locales: en, zh-Hans
      static func pleaseGoSettingsPrivacyPhotosDex4DOpensPhotosPrivileges(_: Void = ()) -> String {
        return NSLocalizedString("Please go -> [Settings-privacy-Photos-Dex4D] opens photos privileges", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please go -> [Settings-privacy-camera-Dex4D] opens camera privileges
      /// 
      /// Locales: en, zh-Hans
      static func pleaseGoSettingsPrivacyCameraDex4DOpensCameraPrivileges(_: Void = ()) -> String {
        return NSLocalizedString("Please go -> [Settings-privacy-camera-Dex4D] opens camera privileges", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please input amount
      /// 
      /// Locales: en, zh-Hans
      static func pleaseInputAmount(_: Void = ()) -> String {
        return NSLocalizedString("Please input amount", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please input number
      /// 
      /// Locales: en, zh-Hans
      static func pleaseInputNumber(_: Void = ()) -> String {
        return NSLocalizedString("Please input number", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please input your keystore file to restore your wallet or import your wallet
      /// 
      /// Locales: en, zh-Hans
      static func pleaseInputYourKeystoreFileToRestoreYourWalletOrImportYourWallet(_: Void = ()) -> String {
        return NSLocalizedString("Please input your keystore file to restore your wallet or import your wallet", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please input your memoric phrase to restore your wallet or import your wallet(Typically 12, separately with blank)
      /// 
      /// Locales: en, zh-Hans
      static func pleaseInputYourMemoricPhraseToRestoreYourWalletOrImportYourWalletTypically12SeparatelyWithBlank(_: Void = ()) -> String {
        return NSLocalizedString("Please input your memoric phrase to restore your wallet or import your wallet(Typically 12, separately with blank)", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please select token
      /// 
      /// Locales: en, zh-Hans
      static func pleaseSelectToken(_: Void = ()) -> String {
        return NSLocalizedString("Please select token", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Price
      /// 
      /// Locales: en, zh-Hans
      static func price(_: Void = ()) -> String {
        return NSLocalizedString("Price", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Protect your asset before it's too late!
      /// 
      /// Locales: en, zh-Hans
      static func protectYourAssetBeforeItSTooLate(_: Void = ()) -> String {
        return NSLocalizedString("Protect your asset before it's too late!", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: QR code expired
      /// 
      /// Locales: en, zh-Hans
      static func qrCodeExpired(_: Void = ()) -> String {
        return NSLocalizedString("QR code expired", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: QR code timeout
      /// 
      /// Locales: en, zh-Hans
      static func qrCodeTimeout(_: Void = ()) -> String {
        return NSLocalizedString("QR code timeout", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: R
      /// 
      /// Locales: en, zh-Hans
      static func regular(_: Void = ()) -> String {
        return NSLocalizedString("Regular", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Realized token
      /// 
      /// Locales: en, zh-Hans
      static func realizedToken(_: Void = ()) -> String {
        return NSLocalizedString("Realized token", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Receive address
      /// 
      /// Locales: en, zh-Hans
      static func receiveAddress(_: Void = ()) -> String {
        return NSLocalizedString("Receive address", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Ref dividends
      /// 
      /// Locales: en, zh-Hans
      static func refDividends(_: Void = ()) -> String {
        return NSLocalizedString("Ref dividends", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Referral address
      /// 
      /// Locales: en, zh-Hans
      static func referralAddress(_: Void = ()) -> String {
        return NSLocalizedString("Referral address", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Referral code
      /// 
      /// Locales: en, zh-Hans
      static func referralCode(_: Void = ()) -> String {
        return NSLocalizedString("Referral code", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Register your referral address(Begin with letter)
      /// 
      /// Locales: en, zh-Hans
      static func registerYourReferralAddressBeginWithLetter(_: Void = ()) -> String {
        return NSLocalizedString("Register your referral address(Begin with letter)", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Reinvest
      /// 
      /// Locales: en, zh-Hans
      static func reinvest(_: Void = ()) -> String {
        return NSLocalizedString("Reinvest", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Reinvest amount
      /// 
      /// Locales: en, zh-Hans
      static func reinvestAmount(_: Void = ()) -> String {
        return NSLocalizedString("Reinvest amount", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Reinvest balance
      /// 
      /// Locales: en, zh-Hans
      static func reinvestBalance(_: Void = ()) -> String {
        return NSLocalizedString("Reinvest balance", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Reject
      /// 
      /// Locales: en, zh-Hans
      static func reject(_: Void = ()) -> String {
        return NSLocalizedString("Reject", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Reload
      /// 
      /// Locales: en, zh-Hans
      static func reload(_: Void = ()) -> String {
        return NSLocalizedString("Reload", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Remind me later
      /// 
      /// Locales: en, zh-Hans
      static func remindMeLater(_: Void = ()) -> String {
        return NSLocalizedString("Remind me later", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Restore
      /// 
      /// Locales: en, zh-Hans
      static func restore(_: Void = ()) -> String {
        return NSLocalizedString("Restore", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Restore wallet
      /// 
      /// Locales: en, zh-Hans
      static func restoreWallet(_: Void = ()) -> String {
        return NSLocalizedString("Restore wallet", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: S
      /// 
      /// Locales: en, zh-Hans
      static func sunDown(_: Void = ()) -> String {
        return NSLocalizedString("SunDown", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Save image
      /// 
      /// Locales: en, zh-Hans
      static func saveImage(_: Void = ()) -> String {
        return NSLocalizedString("Save image", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Save to photo Librany
      /// 
      /// Locales: en, zh-Hans
      static func saveToPhotoLibrany(_: Void = ()) -> String {
        return NSLocalizedString("Save to photo Librany", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Saved
      /// 
      /// Locales: en, zh-Hans
      static func saved(_: Void = ()) -> String {
        return NSLocalizedString("Saved", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Scan
      /// 
      /// Locales: en, zh-Hans
      static func scan(_: Void = ()) -> String {
        return NSLocalizedString("Scan", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Scan result
      /// 
      /// Locales: en, zh-Hans
      static func scanResult(_: Void = ()) -> String {
        return NSLocalizedString("Scan result", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Scanning time
      /// 
      /// Locales: en, zh-Hans
      static func scanningTime(_: Void = ()) -> String {
        return NSLocalizedString("Scanning time", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Security
      /// 
      /// Locales: en, zh-Hans
      static func security(_: Void = ()) -> String {
        return NSLocalizedString("Security", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: See
      /// 
      /// Locales: en, zh-Hans
      static func see(_: Void = ()) -> String {
        return NSLocalizedString("See", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Select token
      /// 
      /// Locales: en, zh-Hans
      static func selectToken(_: Void = ()) -> String {
        return NSLocalizedString("Select token", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Sell
      /// 
      /// Locales: en, zh-Hans
      static func sell(_: Void = ()) -> String {
        return NSLocalizedString("Sell", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Sell amount
      /// 
      /// Locales: en, zh-Hans
      static func sellAmount(_: Void = ()) -> String {
        return NSLocalizedString("Sell amount", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Send
      /// 
      /// Locales: en, zh-Hans
      static func send(_: Void = ()) -> String {
        return NSLocalizedString("Send", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Send amount
      /// 
      /// Locales: en, zh-Hans
      static func sendAmount(_: Void = ()) -> String {
        return NSLocalizedString("Send amount", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Send failure
      /// 
      /// Locales: en, zh-Hans
      static func sendFailure(_: Void = ()) -> String {
        return NSLocalizedString("Send failure", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Send transaction failed
      /// 
      /// Locales: en, zh-Hans
      static func sendTransactionFailed(_: Void = ()) -> String {
        return NSLocalizedString("Send transaction failed", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Set amount
      /// 
      /// Locales: en, zh-Hans
      static func setAmount(_: Void = ()) -> String {
        return NSLocalizedString("Set amount", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Setting
      /// 
      /// Locales: en, zh-Hans
      static func setting(_: Void = ()) -> String {
        return NSLocalizedString("Setting", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Share QR Code
      /// 
      /// Locales: en, zh-Hans
      static func shareQRCode(_: Void = ()) -> String {
        return NSLocalizedString("Share QR Code", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Sign verify failed
      /// 
      /// Locales: en, zh-Hans
      static func signVerifyFailed(_: Void = ()) -> String {
        return NSLocalizedString("Sign verify failed", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Spend: 
      /// 
      /// Locales: en, zh-Hans
      static func spend(_: Void = ()) -> String {
        return NSLocalizedString("Spend: ", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Start
      /// 
      /// Locales: en, zh-Hans
      static func start(_: Void = ()) -> String {
        return NSLocalizedString("Start", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Status
      /// 
      /// Locales: en, zh-Hans
      static func status(_: Void = ()) -> String {
        return NSLocalizedString("Status", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Success
      /// 
      /// Locales: en, zh-Hans
      static func success(_: Void = ()) -> String {
        return NSLocalizedString("Success", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Sun down. %@ away from delist
      /// 
      /// Locales: en, zh-Hans
      static func sunDownTips(_ value1: String) -> String {
        return String(format: NSLocalizedString("Sun down tips", tableName: "Localization", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Swap asset
      /// 
      /// Locales: en, zh-Hans
      static func swapAsset(_: Void = ()) -> String {
        return NSLocalizedString("Swap asset", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Temporary available
      /// 
      /// Locales: en, zh-Hans
      static func temporaryAvailable(_: Void = ()) -> String {
        return NSLocalizedString("Temporary available", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: The QRCode can be automatically scanned in the box.
      /// 
      /// Locales: en, zh-Hans
      static func theQRCodeCanBeAutomaticallyScannedInTheBox(_: Void = ()) -> String {
        return NSLocalizedString("The QRCode can be automatically scanned in the box.", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: The nonce has been bound
      /// 
      /// Locales: en, zh-Hans
      static func theNonceHasBeenBound(_: Void = ()) -> String {
        return NSLocalizedString("The nonce has been bound", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: The results of your scan are as follows：
      /// 
      /// Locales: en, zh-Hans
      static func theResultsOfYourScanAreAsFollows(_: Void = ()) -> String {
        return NSLocalizedString("The results of your scan are as follows：", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: This is last version
      /// 
      /// Locales: en, zh-Hans
      static func thisIsLastVersion(_: Void = ()) -> String {
        return NSLocalizedString("This is last version", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: This is the last version
      /// 
      /// Locales: en, zh-Hans
      static func thisIsTheLastVersion(_: Void = ()) -> String {
        return NSLocalizedString("This is the last version", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: This transcation already finished
      /// 
      /// Locales: en, zh-Hans
      static func thisTranscationAlreadyFinished(_: Void = ()) -> String {
        return NSLocalizedString("This transcation already finished", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: To
      /// 
      /// Locales: en, zh-Hans
      static func to(_: Void = ()) -> String {
        return NSLocalizedString("To", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Token amount
      /// 
      /// Locales: en, zh-Hans
      static func tokenAmount(_: Void = ()) -> String {
        return NSLocalizedString("Token amount", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Token balance
      /// 
      /// Locales: en, zh-Hans
      static func tokenBalance(_: Void = ()) -> String {
        return NSLocalizedString("Token balance", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Token select
      /// 
      /// Locales: en, zh-Hans
      static func tokenSelect(_: Void = ()) -> String {
        return NSLocalizedString("Token select", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Total
      /// 
      /// Locales: en, zh-Hans
      static func total(_: Void = ()) -> String {
        return NSLocalizedString("Total", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Total D4D balance
      /// 
      /// Locales: en, zh-Hans
      static func totalD4DBalance(_: Void = ()) -> String {
        return NSLocalizedString("Total D4D balance", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Total Dividends
      /// 
      /// Locales: en, zh-Hans
      static func totalDividends(_: Void = ()) -> String {
        return NSLocalizedString("Total Dividends", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Total Token balance
      /// 
      /// Locales: en, zh-Hans
      static func totalTokenBalance(_: Void = ()) -> String {
        return NSLocalizedString("Total Token balance", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Total Volume: 
      /// 
      /// Locales: en, zh-Hans
      static func totalVolume(_: Void = ()) -> String {
        return NSLocalizedString("Total Volume", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Total asset (%@)
      /// 
      /// Locales: en, zh-Hans
      static func totalAsset(_ value1: String) -> String {
        return String(format: NSLocalizedString("Total asset (%@)", tableName: "Localization", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Total capital(All pools)
      /// 
      /// Locales: en, zh-Hans
      static func totalCapitalAllPools(_: Void = ()) -> String {
        return NSLocalizedString("Total capital(All pools)", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Trade
      /// 
      /// Locales: en, zh-Hans
      static func trade(_: Void = ()) -> String {
        return NSLocalizedString("Trade", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Transaction
      /// 
      /// Locales: en, zh-Hans
      static func transaction(_: Void = ()) -> String {
        return NSLocalizedString("Transaction", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Transaction failed
      /// 
      /// Locales: en, zh-Hans
      static func transactionFailed(_: Void = ()) -> String {
        return NSLocalizedString("Transaction failed", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Txs dividends
      /// 
      /// Locales: en, zh-Hans
      static func txsDividends(_: Void = ()) -> String {
        return NSLocalizedString("Txs dividends", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: TxsHash
      /// 
      /// Locales: en, zh-Hans
      static func txsHash(_: Void = ()) -> String {
        return NSLocalizedString("TxsHash", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Type
      /// 
      /// Locales: en, zh-Hans
      static func type(_: Void = ()) -> String {
        return NSLocalizedString("Type", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Unable to open camera
      /// 
      /// Locales: en, zh-Hans
      static func unableToOpenCamera(_: Void = ()) -> String {
        return NSLocalizedString("Unable to open camera", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Unable to save image
      /// 
      /// Locales: en, zh-Hans
      static func unableToSaveImage(_: Void = ()) -> String {
        return NSLocalizedString("Unable to save image", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Unknow error
      /// 
      /// Locales: en, zh-Hans
      static func unknowError(_: Void = ()) -> String {
        return NSLocalizedString("Unknow error", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Unknown network
      /// 
      /// Locales: en, zh-Hans
      static func unknownNetwork(_: Void = ()) -> String {
        return NSLocalizedString("Unknown network", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Unnamed title
      /// 
      /// Locales: en, zh-Hans
      static func unnamedTitle(_: Void = ()) -> String {
        return NSLocalizedString("Unnamed title", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Upgrade now
      /// 
      /// Locales: en, zh-Hans
      static func upgradeNow(_: Void = ()) -> String {
        return NSLocalizedString("Upgrade now", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Upload your address to login
      /// 
      /// Locales: en, zh-Hans
      static func uploadYourAddressToLogin(_: Void = ()) -> String {
        return NSLocalizedString("Upload your address to login", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Version
      /// 
      /// Locales: en, zh-Hans
      static func version(_: Void = ()) -> String {
        return NSLocalizedString("Version", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Waiting
      /// 
      /// Locales: en, zh-Hans
      static func waiting(_: Void = ()) -> String {
        return NSLocalizedString("Waiting", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Wallet
      /// 
      /// Locales: en, zh-Hans
      static func wallet(_: Void = ()) -> String {
        return NSLocalizedString("Wallet", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Wallet balance
      /// 
      /// Locales: en, zh-Hans
      static func walletBalance(_: Void = ()) -> String {
        return NSLocalizedString("Wallet balance", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Web login
      /// 
      /// Locales: en, zh-Hans
      static func webLogin(_: Void = ()) -> String {
        return NSLocalizedString("Web login", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Withdraw
      /// 
      /// Locales: en, zh-Hans
      static func withdraw(_: Void = ()) -> String {
        return NSLocalizedString("Withdraw", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Withdraw amount
      /// 
      /// Locales: en, zh-Hans
      static func withdrawAmount(_: Void = ()) -> String {
        return NSLocalizedString("Withdraw amount", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Write down your recovery phrase and keep it in a safe place. Dex4D team cannot reset it or recover your money for you.
      /// 
      /// Locales: en, zh-Hans
      static func writeDownYourRecoveryPhraseAndKeepItInASafePlaceDex4DTeamCannotResetItOrRecoverYourMoneyForYou(_: Void = ()) -> String {
        return NSLocalizedString("Write down your recovery phrase and keep it in a safe place. Dex4D team cannot reset it or recover your money for you.", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Wrong input
      /// 
      /// Locales: en, zh-Hans
      static func wrongInput(_: Void = ()) -> String {
        return NSLocalizedString("Wrong input", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: You have paid for permanent %@ authority Please be more patient before Ethereum confirm this trasaction
      /// 
      /// Locales: en, zh-Hans
      static func youHavePaidForPermanentAuthorityPleaseBeMorePatientBeforeEthereumConfirmThisTrasaction(_ value1: String) -> String {
        return String(format: NSLocalizedString("You have paid for permanent %@ authority\nPlease be more patient before Ethereum confirm this trasaction", tableName: "Localization", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: You have permanent %@ authority now. Enjoy to trade with your %@
      /// 
      /// Locales: en, zh-Hans
      static func youHavePermanentAuthorityNowEnjoyToTradeWithYour(_ value1: String, _ value2: String) -> String {
        return String(format: NSLocalizedString("You have permanent %@ authority now. Enjoy to trade with your %@", tableName: "Localization", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2)
      }
      
      /// en translation: You have signed onto web Dex4D
      /// 
      /// Locales: en, zh-Hans
      static func youHaveSignedOntoWebDex4D(_: Void = ()) -> String {
        return NSLocalizedString("You have signed onto web Dex4D", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Your new keystore file in JSON format generate with password you just input as shown below. Please keep it in safe place. You can import your wallet with this keystore file and it's password
      /// 
      /// Locales: en, zh-Hans
      static func yourNewKeystoreFileInJSONFormatGenerateWithPasswordYouJustInputAsShownBelowPleaseKeepItInSafePlaceYouCanImportYourWalletWithThisKeystoreFileAndItSPassword(_: Void = ()) -> String {
        return NSLocalizedString("Your new keystore file in JSON format generate with password you just input as shown below. Please keep it in safe place. You can import your wallet with this keystore file and it's password", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 当前D4D数量: %@
      /// 
      /// Locales: zh-Hans
      static func currentD4DAmount(_ value1: String) -> String {
        return String(format: NSLocalizedString("Current D4D amount: %@", tableName: "Localization", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// zh-Hans translation: 转账地址无效
      /// 
      /// Locales: zh-Hans
      static func sendAddressInvalid(_: Void = ()) -> String {
        return NSLocalizedString("Send address invalid", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _WalletAssetView.validate()
      try _SendTokenView.validate()
      try _SelectImportView.validate()
      try _ShowSendSuccessView.validate()
    }
    
    struct _AssetTitleView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AssetTitleView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> AssetTitleView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AssetTitleView
      }
      
      fileprivate init() {}
    }
    
    struct _AssetViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AssetViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> AssetViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AssetViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _SelectImportView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SelectImportView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> SelectImportView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SelectImportView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_right", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_right' is used in nib 'SelectImportView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _SendTokenView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SendTokenView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> SendTokenView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SendTokenView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "wallet_scan", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'wallet_scan' is used in nib 'SendTokenView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_right", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_right' is used in nib 'SendTokenView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _ShowSendSuccessView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ShowSendSuccessView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ShowSendSuccessView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ShowSendSuccessView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "withdraw_success", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'withdraw_success' is used in nib 'ShowSendSuccessView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _WalletAssetView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "WalletAssetView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> WalletAssetView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WalletAssetView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "wallet_send_selected", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'wallet_send_selected' is used in nib 'WalletAssetView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "wallet_history_selected", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'wallet_history_selected' is used in nib 'WalletAssetView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "wallet_receive_selected", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'wallet_receive_selected' is used in nib 'WalletAssetView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_eye_open_wallet", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_eye_open_wallet' is used in nib 'WalletAssetView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try launchScreen.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "launch_background") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'launch_background' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "welcome_logo") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'welcome_logo' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logo_text") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo_text' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
